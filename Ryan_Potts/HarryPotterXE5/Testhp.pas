unit Testhp;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, hp;

type
  // Test methods for class Thp

  TestThp = class(TTestCase)
  strict private
    Fhp: Thp;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCreated;
    procedure TestSingleBookPrice;
    procedure TestBasketContainsMyBooks;
    procedure TestTotalBasketPriceSingleBook;
    procedure TestTotalBasketPriceTwoofSameBook;
    procedure TestTotalBasketPriceEmptyBasket;
    procedure TestBasketWith2DifferentBooks;
    procedure TestBasketWith3DifferentBooks;
    procedure TestBasketWith4DifferentBooks;
    procedure TestBasketWith5DifferentBooks;
    procedure TestBasket22211;
    procedure TestBasket22221;
    procedure TestBasket22222;
    procedure TestBasket32222;
    procedure TestBasket33222;
  end;

implementation

const MinDelta = 0.005; //cents

procedure TestThp.SetUp;
begin
  Fhp := Thp.Create;
end;

procedure TestThp.TearDown;
begin
  Fhp.Free;
  Fhp := nil;
end;

procedure TestThp.TestBasket33222;
begin
  Fhp.Basket := '112233445512';
  CheckEquals(75.20,Fhp.BasketTotal,MinDelta,'Price should be 75.20');
end;

procedure TestThp.TestBasket32222;
begin
  Fhp.Basket := '11223344551';
  CheckEquals(68.00,Fhp.BasketTotal,MinDelta,'Price should be 68.00');
end;

procedure TestThp.TestBasket22222;
begin
  Fhp.Basket := '1122334455';
  CheckEquals(60.00,Fhp.BasketTotal,MinDelta,'Price should be 60.00');
end;

procedure TestThp.TestBasket22221;
begin
  Fhp.Basket := '112233445';
  CheckEquals(55.60,Fhp.BasketTotal,MinDelta,'Price should be 55.60');
end;

procedure TestThp.TestBasket22211;
begin
  Fhp.Basket := '11223345';
  CheckEquals(51.20,Fhp.BasketTotal,MinDelta,'Price should be 51.20');
end;

procedure TestThp.TestBasketWith5DifferentBooks;
begin
  Fhp.Basket := '12345'; //one copy of book one, one copy book two, and one copy of book three
  CheckEquals(30.00,Fhp.BasketTotal,MinDelta,'Price should be 30.00');
end;

procedure TestThp.TestBasketWith4DifferentBooks;
begin
  Fhp.Basket := '1234'; //one copy of book one, one copy book two, and one copy of book three
  CheckEquals(25.60,Fhp.BasketTotal,MinDelta,'Price should be 25.60');
end;

procedure TestThp.TestBasketWith3DifferentBooks;
begin
  Fhp.Basket := '123'; //one copy of book one, one copy book two, and one copy of book three
  CheckEquals(21.60,Fhp.BasketTotal,MinDelta,'Price should be 21.60');
end;

procedure TestThp.TestBasketWith2DifferentBooks;
begin
  Fhp.Basket := '12'; //one copy of book one and one copy book two
  CheckEquals(15.2,Fhp.BasketTotal,MinDelta,'Price should be 15.2');
end;

procedure testThp.TestTotalBasketPriceEmptyBasket;
begin
  Fhp.Basket := '';
  CheckEquals(0.0,FHp.BasketTotal,MinDelta,'Total should be zero');
end;

procedure TestThp.TestTotalBasketPriceTwoofSameBook;
begin
  Fhp.Basket := '22'; //two copies of book two
  CheckEquals(16.0,Fhp.BasketTotal,MinDelta,'Price should be 16.0');
end;

procedure TestThp.TestTotalBasketPriceSingleBook;
begin
  Fhp.Basket := '1'; //one copy of book one
  CheckEquals(8.0,Fhp.BasketTotal,MinDelta,'Price should be 8.0');
end;

procedure TestThp.TestBasketContainsMyBooks;
var MyBasket : String;
begin
  MyBasket := '3'; //one copy of book three
  Fhp.Basket := MyBasket;
  CheckEquals(MyBasket, Fhp.Basket,'The Basket isn''t right');
end;

procedure TestThp.TestSingleBookPrice;
begin
  CheckEquals(8.0,Fhp.SingleBookPrice,MinDelta,'Incorrect single book price');
end;

procedure TestThp.TestCreated;
begin
  CheckNotNull(Fhp,'Failed to create instance: Fhp');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestThp.Suite);
end.

